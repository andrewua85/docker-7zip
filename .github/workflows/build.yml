name: build

on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  pull_request:
    branches: 'master'
    paths:
      - '.github/workflows/build.yml'
      - 'Dockerfile'
  push:
    branches: 'master'
    paths:
      - '.github/workflows/build.yml'
      - 'Dockerfile'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Prepare
        id: prepare
        run: |
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x
          echo ::set-output name=docker_username::crazymax
          echo ::set-output name=docker_image::crazymax/7zip
          echo ::set-output name=version::latest
      -
        # https://github.com/crazy-max/ghaction-docker-buildx
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      -
        # https://github.com/actions/checkout
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Docker Buildx (no push)
        run: |
          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=false" \
            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
            --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
            --file Dockerfile .
      -
        name: Docker Login
        if: success() && github.event_name != 'pull_request'
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin
      -
        name: Docker Buildx (push)
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=true" \
            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
            --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
            --file Dockerfile .
      -
        name: Docker Check Manifest
        if: always() && github.event_name != 'pull_request'
        run: |
          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:latest
      -
        name: Clear
        if: always() && github.event_name != 'pull_request'
        run: |
          rm -f ${HOME}/.docker/config.json
